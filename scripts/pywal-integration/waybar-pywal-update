#!/bin/bash
# Waybar pywal integration script
# Generates waybar colors and reloads waybar

# Exit on any error
set -e

# Function to log messages
log_message() {
    echo "[WAYBAR-PYWAL] $1"
}

# Check if pywal is installed
if ! command -v wal &> /dev/null; then
    log_message "ERROR: pywal (wal command) not found"
    exit 1
fi

# Check if waybar is running
waybar_running() {
    pgrep -x waybar > /dev/null
}

# Generate waybar colors from current pywal scheme
generate_waybar_colors() {
    local wal_cache_dir="$HOME/.cache/wal"
    local waybar_template="$HOME/.config/wal/templates/colors-waybar.css"
    local waybar_colors="$wal_cache_dir/colors-waybar.css"

    # Check if pywal has been initialized
    if [[ ! -f "$wal_cache_dir/colors.json" ]]; then
        log_message "ERROR: Pywal not initialized. Run 'wal -i /path/to/wallpaper' first"
        exit 1
    fi

    # Check if waybar template exists
    if [[ ! -f "$waybar_template" ]]; then
        log_message "WARNING: Waybar template not found at $waybar_template"
        log_message "Creating basic template..."
        mkdir -p "$(dirname "$waybar_template")"
        cat > "$waybar_template" << 'EOF'
/* Waybar colors generated by pywal */
@define-color foreground {foreground};
@define-color background {background};
@define-color cursor {cursor};

@define-color color0 {color0};
@define-color color1 {color1};
@define-color color2 {color2};
@define-color color3 {color3};
@define-color color4 {color4};
@define-color color5 {color5};
@define-color color6 {color6};
@define-color color7 {color7};
@define-color color8 {color8};
@define-color color9 {color9};
@define-color color10 {color10};
@define-color color11 {color11};
@define-color color12 {color12};
@define-color color13 {color13};
@define-color color14 {color14};
@define-color color15 {color15};
EOF
    fi

    # Generate waybar colors using pywal template system
    log_message "Generating waybar colors from current pywal scheme..."
    wal -R

    # Verify the colors file was generated
    if [[ -f "$waybar_colors" ]]; then
        log_message "SUCCESS: Waybar colors generated at $waybar_colors"
    else
        log_message "ERROR: Failed to generate waybar colors"
        exit 1
    fi
}

# Check waybar status and start if needed
check_waybar() {
    if waybar_running; then
        log_message "Waybar is running - colors will update automatically"
    else
        log_message "Waybar not running, starting waybar..."
        waybar &
        disown
        log_message "Waybar started"
    fi
}

# Apply intelligent color assignments
apply_intelligent_colors() {
    local intelligence_script
    intelligence_script="$HOME/.local/bin/waybar-color-intelligence.py"

    if [[ -x "$intelligence_script" ]]; then
        log_message "Applying intelligent color assignments..."
        if "$intelligence_script"; then
            log_message "SUCCESS: Intelligent colors applied"
        else
            log_message "WARNING: Intelligence script failed, using default colors"
        fi
    else
        log_message "WARNING: Intelligence script not found at $intelligence_script"
    fi
}

# Main execution
main() {
    log_message "Updating waybar with current pywal colors..."

    generate_waybar_colors
    apply_intelligent_colors
    check_waybar

    log_message "Waybar pywal update complete"
}

# Run if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi