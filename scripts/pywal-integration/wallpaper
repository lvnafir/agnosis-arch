#!/bin/bash

# Script: 03-wallpaper-switcher.sh
# Purpose: Switch wallpapers and automatically update system colors
# Simplified version with proper hook integration

set -euo pipefail

# Configuration
WALLPAPER_DIR="$HOME/Pictures/wallpapers"
CACHE_FILE="$HOME/.cache/current_wallpaper"
PYWAL_DEFAULT_BACKEND="wal"  # Default backend (wal, colorz, haishoku, colorthief)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to display usage
show_usage() {
    echo -e "${GREEN}=== Pywal Wallpaper Switcher ===${NC}"
    echo -e "${YELLOW}Dynamic wallpaper and color theme switcher${NC}\n"
    echo -e "${BLUE}Usage:${NC}"
    echo -e "  $(basename "$0") [OPTIONS] [WALLPAPER]"
    echo ""
    echo -e "${BLUE}Options:${NC}"
    echo -e "  -n, --next        Select next wallpaper in directory"
    echo -e "  -r, --random      Select random wallpaper from directory"
    echo -e "  -l, --list        List available wallpapers"
    echo -e "  -c, --current     Show current wallpaper"
    echo -e "  -d, --directory   Set wallpaper directory (default: ~/Pictures/wallpapers)"
    echo -e "  -t, --transition  Set transition type (fade, wipe, grow, center, any, outer, random)"
    echo -e "  -s, --duration    Set transition duration in seconds (default: 2)"
    echo -e "  -b, --backend     Set pywal backend (wal, haishoku, colorthief, colorz)"
    echo -e "  -h, --help        Show this help message"
    echo ""
    echo -e "${BLUE}Examples:${NC}"
    echo -e "  $(basename "$0") ~/Pictures/wallpapers/noia.jpg"
    echo -e "  $(basename "$0") --random"
    echo -e "  $(basename "$0") -t fade -s 3 ~/Downloads/wallpaper.png"
    echo -e "  $(basename "$0") -r -b haishoku"
}

# Default values
TRANSITION_TYPE="fade"
TRANSITION_DURATION="2"
PYWAL_BACKEND="${PYWAL_DEFAULT_BACKEND:-colorthief}"
WALLPAPER=""
RANDOM_MODE=false
NEXT_MODE=false
LIST_MODE=false
SHOW_CURRENT=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -n|--next)
            NEXT_MODE=true
            shift
            ;;
        -r|--random)
            RANDOM_MODE=true
            shift
            ;;
        -l|--list)
            LIST_MODE=true
            shift
            ;;
        -c|--current)
            SHOW_CURRENT=true
            shift
            ;;
        -d|--directory)
            WALLPAPER_DIR="$2"
            shift 2
            ;;
        -t|--transition)
            TRANSITION_TYPE="$2"
            shift 2
            ;;
        -s|--duration)
            TRANSITION_DURATION="$2"
            shift 2
            ;;
        -b|--backend)
            PYWAL_BACKEND="$2"
            shift 2
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        *)
            WALLPAPER="$1"
            shift
            ;;
    esac
done

# Show current wallpaper
if [ "$SHOW_CURRENT" = true ]; then
    if [ -f "$CACHE_FILE" ]; then
        echo -e "${BLUE}Current wallpaper:${NC}"
        cat "$CACHE_FILE"
    else
        echo -e "${YELLOW}No wallpaper currently set${NC}"
    fi
    exit 0
fi

# List available wallpapers
if [ "$LIST_MODE" = true ]; then
    echo -e "${BLUE}Available wallpapers in $WALLPAPER_DIR:${NC}"
    if [ -d "$WALLPAPER_DIR" ]; then
        find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.bmp" \) | sort | while read -r file; do
            echo -e "  ${CYAN}$(basename "$file")${NC}"
        done
    else
        echo -e "${RED}Wallpaper directory not found: $WALLPAPER_DIR${NC}"
        exit 1
    fi
    exit 0
fi

# Ensure wallpaper directory exists
if [ ! -d "$WALLPAPER_DIR" ]; then
    echo -e "${YELLOW}Creating wallpaper directory: $WALLPAPER_DIR${NC}"
    mkdir -p "$WALLPAPER_DIR"
fi

# Select wallpaper
if [ "$NEXT_MODE" = true ]; then
    # Select next wallpaper in directory
    WALLPAPERS=()
    while IFS= read -r -d $'\0'; do
        WALLPAPERS+=("$REPLY")
    done < <(find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.bmp" \) -print0 | sort -z)
    
    if [ ${#WALLPAPERS[@]} -eq 0 ]; then
        echo -e "${RED}No wallpapers found in $WALLPAPER_DIR${NC}"
        exit 1
    fi
    
    # Get current wallpaper
    CURRENT=""
    if [ -f "$CACHE_FILE" ]; then
        CURRENT=$(cat "$CACHE_FILE")
    fi
    
    # Find current index and get next
    NEXT_INDEX=0
    for i in "${!WALLPAPERS[@]}"; do
        if [ "${WALLPAPERS[$i]}" = "$CURRENT" ]; then
            NEXT_INDEX=$(( (i + 1) % ${#WALLPAPERS[@]} ))
            break
        fi
    done
    
    WALLPAPER="${WALLPAPERS[$NEXT_INDEX]}"
    echo -e "${BLUE}Selected next wallpaper: $(basename "$WALLPAPER")${NC}"
elif [ "$RANDOM_MODE" = true ]; then
    # Select random wallpaper
    WALLPAPERS=()
    while IFS= read -r -d $'\0'; do
        WALLPAPERS+=("$REPLY")
    done < <(find "$WALLPAPER_DIR" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.bmp" \) -print0)
    
    if [ ${#WALLPAPERS[@]} -eq 0 ]; then
        echo -e "${RED}No wallpapers found in $WALLPAPER_DIR${NC}"
        exit 1
    fi
    
    RANDOM_INDEX=$((RANDOM % ${#WALLPAPERS[@]}))
    WALLPAPER="${WALLPAPERS[$RANDOM_INDEX]}"
    echo -e "${BLUE}Selected random wallpaper: $(basename "$WALLPAPER")${NC}"
elif [ -z "$WALLPAPER" ]; then
    # No wallpaper specified, show usage
    show_usage
    exit 1
fi

# Verify wallpaper exists
if [ ! -f "$WALLPAPER" ]; then
    # Try to find it in the wallpaper directory
    if [ -f "$WALLPAPER_DIR/$WALLPAPER" ]; then
        WALLPAPER="$WALLPAPER_DIR/$WALLPAPER"
    elif [ -f "$WALLPAPER_DIR/$(basename "$WALLPAPER")" ]; then
        WALLPAPER="$WALLPAPER_DIR/$(basename "$WALLPAPER")"
    else
        echo -e "${RED}Wallpaper not found: $WALLPAPER${NC}"
        exit 1
    fi
fi

# Get absolute path
WALLPAPER=$(realpath "$WALLPAPER")

echo -e "${GREEN}=== Setting Wallpaper and Updating Colors ===${NC}"
echo -e "${BLUE}Wallpaper:${NC} $WALLPAPER"
echo -e "${BLUE}Transition:${NC} $TRANSITION_TYPE ($TRANSITION_DURATION seconds)"
echo -e "${BLUE}Pywal Backend:${NC} $PYWAL_BACKEND"

# Step 1: Set wallpaper with swww
echo -e "\n${YELLOW}Step 1: Setting wallpaper with swww...${NC}"

# Initialize swww if not running
if ! pgrep -x swww-daemon >/dev/null; then
    echo -e "${CYAN}Starting swww daemon...${NC}"
    swww-daemon &
    sleep 2
fi

# Set the wallpaper
swww img "$WALLPAPER" \
    --transition-type "$TRANSITION_TYPE" \
    --transition-duration "$TRANSITION_DURATION" \
    --transition-fps 60

echo -e "${GREEN}✓ Wallpaper set${NC}"

# Step 2: Generate color scheme with pywal
echo -e "\n${YELLOW}Step 2: Generating color scheme with pywal...${NC}"

# Generate colors and run hooks
wal -i "$WALLPAPER" --backend "$PYWAL_BACKEND" -q -o ~/.config/wal/done.sh

echo -e "${GREEN}✓ Color scheme generated${NC}"

# Step 3: Show generated colors
echo -e "\n${YELLOW}Step 3: Generated color palette:${NC}"
if [ -f ~/.cache/wal/colors ]; then
    # Display colors in a nice format (set FZF_DEFAULT_OPTS and LS_COLORS to avoid unbound variables)
    export FZF_DEFAULT_OPTS=""
    export LS_COLORS=""
    source ~/.cache/wal/colors.sh
    echo -e "  Background: ${background}"
    echo -e "  Foreground: ${foreground}"
    echo -e "  Accent:     ${color4}"
    echo -e "  Urgent:     ${color1}"
fi

# Step 4: Update all integrated applications
echo -e "\n${YELLOW}Step 4: Updating integrated applications...${NC}"

# The pywal hooks will automatically run, but we can show progress
if [ -x ~/.config/wal/done/hyprland.sh ]; then
    echo -e "${CYAN}  Updating Hyprland...${NC}"
fi

if [ -x ~/.config/wal/done/fuzzel.sh ]; then
    echo -e "${CYAN}  Updating Fuzzel...${NC}"
fi

if [ -x ~/.config/wal/done/waybar.sh ]; then
    echo -e "${CYAN}  Updating Waybar (auto-reload via CSS)...${NC}"
fi

# Save current wallpaper path
echo "$WALLPAPER" > "$CACHE_FILE"

# Step 5: Send notification
if command -v notify-send >/dev/null 2>&1; then
    notify-send "Wallpaper Changed" "Theme updated to match $(basename "$WALLPAPER")" \
        -i preferences-desktop-wallpaper \
        -t 3000
fi

echo -e "\n${GREEN}=== Wallpaper and Theme Update Complete ===${NC}"
echo -e "${BLUE}All applications have been updated with the new color scheme!${NC}"